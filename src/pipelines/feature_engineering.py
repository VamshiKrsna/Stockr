# src/data/feature_engineering.py
import pandas as pd
import os

def add_features(df):
    """
    Enhances the stock data with additional features like rolling averages, lag features, 
    and technical indicators like EMA, MACD, and RSI.
    """
    # Drop Dividends and Stock Splits as they are not useful for forecasting
    df = df.drop(["Dividends", "Stock Splits"], axis=1, errors='ignore')

    # Add rolling mean features for 3, 9, and 18-day windows
    df['S_3'] = df['Close'].rolling(window=3).mean()
    df['S_9'] = df['Close'].rolling(window=9).mean()
    df['S_18'] = df['Close'].rolling(window=18).mean()

    # Add lag features
    for i in range(1, 4):
        df[f'lag_{i}'] = df['Close'].shift(i)

    # Add rolling window statistics
    df['Rolling_Mean'] = df['Close'].rolling(window=3).mean()
    df['Rolling_Min'] = df['Close'].rolling(window=3).min()
    df['Rolling_Max'] = df['Close'].rolling(window=3).max()

    # Exponential Moving Average
    df["EMA_12"] = df['Close'].ewm(span=12, adjust=False).mean()
    df["EMA_26"] = df['Close'].ewm(span=26, adjust=False).mean()

    # MACD - Moving Average Convergence Divergence
    df['MACD'] = df['EMA_12'] - df['EMA_26']
    df['MACD_Signal'] = df['MACD'].ewm(span=9, adjust=False).mean()

    # RSI - Relative Strength Index
    delta = df['Close'].diff(1)
    gain = delta.where(delta > 0, 0).rolling(window=14).mean()
    loss = -delta.where(delta < 0, 0).rolling(window=14).mean()
    RS = gain / loss
    df['RSI'] = 100 - (100 / (1 + RS))

    # Drop rows with missing values generated by rolling calculations and target shifting
    df.dropna(inplace=True)

    return df

def enhance_data(processed_path="data/processed/", enhanced_path="data/enhanced/"):
    """
    Enhances the processed data with advanced features and saves it.
    
    Parameters:
    - processed_path: Directory of processed data CSV files.
    - enhanced_path: Directory where enhanced data will be saved.
    """
    if not os.path.exists(enhanced_path):
        os.makedirs(enhanced_path)
    
    for filename in os.listdir(processed_path):
        if filename.endswith(".csv"):
            print(f"Enhancing {filename}...")
            data = pd.read_csv(os.path.join(processed_path, filename), parse_dates=["Date"])
            data = add_features(data)
            data.to_csv(os.path.join(enhanced_path, filename), index=False)
            print(f"Enhanced data saved at {enhanced_path}")

if __name__ == "__main__":
    enhance_data()